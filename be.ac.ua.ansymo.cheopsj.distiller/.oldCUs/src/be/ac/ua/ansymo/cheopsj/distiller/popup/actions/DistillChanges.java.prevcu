package be.ac.ua.ansymo.cheopsj.distiller.popup.actions;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.Status;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.ISelectionService;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import be.ac.ua.ansymo.cheopsj.distiller.changeextractor.ChangeExtractor;
import be.ac.ua.ansymo.cheopsj.distiller.connection.Connector;
import be.ac.ua.ansymo.cheopsj.distiller.connection.ConnectorFactory;
import be.ac.ua.ansymo.cheopsj.distiller.connection.LogEntryHandler;
import be.ac.ua.ansymo.cheopsj.distiller.connection.LogEntryHandler.Change;
public class DistillChanges implements IObjectActionDelegate {
  private IProject selectedProject;
  private Connector connector;
  private IProject getProjectForSelection(  ISelection selection){
    if (selection == null) {
      return null;
    }
    Object selectedElement=((IStructuredSelection)selection).getFirstElement();
    if (selectedElement instanceof IProject) {
      return (IProject)selectedElement;
    }
 else     if (selectedElement instanceof IJavaProject) {
      return ((IJavaProject)selectedElement).getProject();
    }
    return null;
  }
  private void getSelectedProject(){
    IWorkbench workbench=PlatformUI.getWorkbench();
    IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
    ISelectionService selectionService=window.getSelectionService();
    ISelection selection=selectionService.getSelection("org.eclipse.jdt.ui.PackageExplorer");
    selectedProject=getProjectForSelection(selection);
  }
  private Shell getShell(){
    IWorkbench workbench=PlatformUI.getWorkbench();
    IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
    if (window == null)     return null;
    return window.getShell();
  }
  @Override public void run(  IAction action){
    getSelectedProject();
    ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
    try {
      dialog.run(true,true,new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          iterateRevisions(monitor);
        }
      }
);
    }
 catch (    InterruptedException e) {
    }
catch (    InvocationTargetException e) {
      Throwable target=e.getTargetException();
      ErrorDialog.openError(getShell(),"TargetError","Error Occured While Running Experiment",new Status(0,"MetricsExperiment",0,"no message",target));
    }
  }
  private void iterateRevisions(  IProgressMonitor monitor){
    try {
      File projectFile=selectedProject.getLocation().toFile();
      connector=ConnectorFactory.createConnector("","",projectFile);
      if (connector == null) {
        return;
      }
      long rev=0;
      long targetRev=connector.getCurrentRevision(projectFile);
      int diff=(int)(targetRev - rev);
      if (monitor != null) {
        monitor.beginTask("Extracting changes",diff);
      }
      while (rev < targetRev) {
        try {
          if (monitor != null) {
            double percent=((double)rev / targetRev) * 100;
            monitor.subTask("from revision: " + rev + "/"+ targetRev+ " ("+ (int)percent+ "%)");
          }
          LogEntryHandler entryHandler=connector.getLogEntryHandler();
          connector.getCommitMessage(projectFile,rev + 1,entryHandler);
          Iterator<Entry<String,Change>> it=entryHandler.getChangedPaths().entrySet().iterator();
          while (it.hasNext()) {
            Map.Entry<String,Change> entry=it.next();
            if (!entry.getKey().endsWith(".java")) {
              continue;
            }
            try {
              ChangeExtractor extractor=entryHandler.getExtractor();
              extractor.extractChangesFromJavaFiles(rev,entry.getValue(),entry.getKey(),connector);
            }
 catch (            Exception e) {
            }
          }
          if (monitor != null) {
            monitor.worked(1);
          }
          rev++;
        }
 catch (        Exception e) {
          e.printStackTrace();
          rev++;
        }
        if (monitor != null && monitor.isCanceled()) {
          break;
        }
      }
      if (monitor != null) {
        monitor.done();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  @Override public void setActivePart(  IAction action,  IWorkbenchPart targetPart){
  }
  @Override public void selectionChanged(  IAction action,  ISelection selection){
  }
}
