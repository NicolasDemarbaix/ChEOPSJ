package org.evolizer.core.hibernate;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtension;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Plugin;
import org.evolizer.core.hibernate.model.api.IModelProvider;
import org.osgi.framework.BundleContext;
/** 
 * The activator class controls the plug-in life cycle.
 * @author wuersch
 */
public class EvolizerHibernatePlugin extends Plugin {
  /** 
 * The plug-in ID
 */
  public static final String PLUGIN_ID="org.evolizer.core.hibernate";
  private static EvolizerHibernatePlugin sPlugin;
  /** 
 * The constructor.
 */
  public EvolizerHibernatePlugin(){
    EvolizerHibernatePlugin.sPlugin=this;
  }
  /** 
 * {@inheritDoc}
 */
  @Override public void start(  BundleContext context) throws Exception {
    super.start(context);
  }
  /** 
 * {@inheritDoc}
 */
  @Override public void stop(  BundleContext context) throws Exception {
    EvolizerHibernatePlugin.sPlugin=null;
    super.stop(context);
  }
  /** 
 * Returns the shared instance.
 * @return the shared instance
 */
  public static EvolizerHibernatePlugin getDefault(){
    return EvolizerHibernatePlugin.sPlugin;
  }
  /** 
 * Queries all model providers and returns ejb3-annotated classes.
 * @return A list containing classes that are annotated with ejb3-tags for Hibernate mapping.
 * @throws Exception 
 */
  public List<Class<?>> gatherModels() throws Exception {
    List<Class<?>> annotatedClasses=new ArrayList<Class<?>>();
    IExtension[] extensions=Platform.getExtensionRegistry().getExtensionPoint(EvolizerHibernatePlugin.PLUGIN_ID,"modelProvider").getExtensions();
    for (    IExtension element : extensions) {
      IConfigurationElement[] configElements=element.getConfigurationElements();
      for (      IConfigurationElement configElement : configElements) {
        try {
          IModelProvider provider=(IModelProvider)configElement.createExecutableExtension("class");
          Class<?>[] classes=provider.getAnnotatedClasses();
          for (          Class<?> element1 : classes) {
            annotatedClasses.add(element1);
          }
        }
 catch (        CoreException exception) {
          String message="Could not create executable extension from " + configElement.getContributor() + ". "+ exception.getMessage();
          throw new Exception(message);
        }
      }
    }
    return annotatedClasses;
  }
  /** 
 * Opens a file located within the plugin-bundle.
 * @param filePath relative path of the file starting at the root of this plugin
 * @return an InputStream reading the specified file
 * @throws IOException if file could not be opened
 */
  public static InputStream openBundledFile(  String filePath) throws IOException {
    return EvolizerHibernatePlugin.getDefault().getBundle().getEntry(filePath).openStream();
  }
}
